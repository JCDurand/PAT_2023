unit frmCustomer_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.TabNotBk,
  Vcl.Mask, Vcl.Buttons, ADODB, DATA.DB,
  dmTest_u,
  clsCustomer_u, frmTFile_u;

type
  TfrmCustomer = class(TForm)
    TabbedNotebook1: TTabbedNotebook;
    bitbtnCancel: TBitBtn;
    bitbtnUpdate: TBitBtn;
    cmbCountry: TComboBox;
    imgBack: TImage;
    lblCountry: TLabel;
    lblPayment: TLabel;
    ledAddress: TLabeledEdit;
    ledBank: TLabeledEdit;
    ledCard: TLabeledEdit;
    ledCity: TLabeledEdit;
    ledEmail: TLabeledEdit;
    ledPhone: TLabeledEdit;
    ledPost: TLabeledEdit;
    ledPW: TLabeledEdit;
    ledPWConf: TLabeledEdit;
    pnlInstructions: TPanel;
    rgpPayment: TRadioGroup;
    redPast: TRichEdit;
    lblPast: TLabel;
    btnViewPast: TButton;
    procedure FormCreate(Sender: TObject);
    procedure increaseArraySize;
    procedure addCustomer(objCustomer: TCustomer);
    procedure ledPhoneExit(Sender: TObject);
    procedure cmbCountryExit(Sender: TObject);
    procedure ledAddressExit(Sender: TObject);
    procedure ledBankExit(Sender: TObject);
    procedure ledCardExit(Sender: TObject);
    procedure ledCityExit(Sender: TObject);
    procedure ledEmailExit(Sender: TObject);
    procedure ledPwConfExit(Sender: TObject);
    procedure ledPwExit(Sender: TObject);
    procedure ledPostExit(Sender: TObject);
    procedure bitbtnCancelClick(Sender: TObject);
    procedure bitbtnUpdateClick(Sender: TObject);
    procedure rgpPaymentClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnViewPastClick(Sender: TObject);
  private
    { Private declarations }
    sPassCheck: String;
    procedure prepDB(sText: String);
  public
    { Public declarations }
    arrCustomer: Array of TCustomer;
    iCusCount: Integer;
    procedure refreshArrCus;
  end;

var
  frmCustomer: TfrmCustomer;

implementation

uses
  frmLogin_u, frmStore_u;

{$R *.dfm}

procedure TfrmCustomer.addCustomer(objCustomer: TCustomer);
begin
  frmCustomer.arrCustomer[frmCustomer.iCusCount -1] := objCustomer;
end;

procedure TfrmCustomer.bitbtnCancelClick(Sender: TObject);
begin
  frmCustomer.Hide;
  frmStore.Show;
end;

procedure TfrmCustomer.bitbtnUpdateClick(Sender: TObject);
begin
  if ledPWConf.Text = '' then
  begin
    ShowMessage('Please enter a value');
    Exit;
  end;

  dmtest.runSQL('UPDATE Customer SET CPassword = ' + QuotedStr(ledPWConf.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));

  dmTest.runSQL('SELECT CFirstName, CLastName FROM Customer WHERE CID = ' + QuotedStr(frmLogin.sUser));
  with dmTest do
    frmTFile.addCustLine(tblCustomers['CFirstName'] + ' ' + tblCustomers['CLastName'] + ' changed their password.');
end;

procedure TfrmCustomer.btnViewPastClick(Sender: TObject);
var
  sName: String;
begin
  redPast.Clear;

  with dmTest do
  begin
    runSQL2('SELECT * FROM Orders WHERE OCustomer = ' + QuotedStr(frmLogin.sUser));

    while NOT tblOrders.Eof do
    begin
      tblOrders.First;
      tblProduct.Locate('PID', tblOrders['OProduct'], [loCaseInsensitive]);
      sName := tblProduct['PName'];

      redPast.Lines.Add(sName + ': ' + IntToStr(tblOrders['OAmount']));
      tblOrders.Next;
    end;

  end;
end;

procedure TfrmCustomer.cmbCountryExit(Sender: TObject);
var
  sCountry: String;
begin
  if cmbCountry.ItemIndex = -1 then
    begin
      ShowMessage('Please select a country.');
      cmbCountry.SetFocus;
      Exit;
    end;

  sCountry := cmbCountry.Items[cmbCountry.ItemIndex];

  with dmTest do
  begin
    runSQL('UPDATE Customer SET CCountry = ' + QuotedStr(sCountry) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
  end;

  refreshArrCus;
end;

procedure TfrmCustomer.FormCreate(Sender: TObject); //loads customer objects into arrCustomer
begin
  refreshArrCus;

end;
procedure TfrmCustomer.FormShow(Sender: TObject);
var
  sPass: String;
  bFlag: Boolean;
begin
  ledBank.Visible := False;
  ledCard.Visible := False;
  sPass := '';

  while bFlag = False do
  begin
    with dmTest do
      begin
        runSQL('SELECT * FROM Customer WHERE CID = ' + QuotedStr(frmLogin.sUser));

        if tblCustomers['CPassword'] = '1234' then
        begin
          sPass := InputBox('Password change', 'Please enter a new password.', '');
          if (sPass = '') OR (sPass = tblCustomers['CPassword']) then
          begin
              ShowMessage('Please enter a new password.');
              Continue;
          end;  //IF

      runSQL('UPDATE Customer SET CPassword = ' + QuotedStr(sPass));

    end;  //WITH

      bFlag := True;

  end;  //WHILE

  end;

end;

procedure TfrmCustomer.increaseArraySize;
begin
  Inc(iCusCount);
  SetLength(arrCustomer, iCusCount);
end;

procedure TfrmCustomer.ledAddressExit(Sender: TObject);
begin
  if Length(ledAddress.Text) > 255 then
    begin
      ShowMessage('Address too long.');
      ledAddress.Clear;
      ledAddress.SetFocus;
      Exit;
    end;

  dmtest.runSQL('UPDATE Customer SET CAddress = ' + QuotedStr(ledAddress.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledBankExit(Sender: TObject);
var
  I, iCount: Integer;
  sText: String;
begin
  iCount := 0;
  sText := LowerCase(ledBank.Text);

  if sText = '' then
    begin
      ShowMessage('Please enter a bank number.');
      ledCard.Clear;
      ledCard.SetFocus;
      Exit;
    end;

  for I := 1 to Length(sText) do
      begin
        if sText[I] IN ['a'..'z'] then
          Inc(iCount);
      end;

  if iCount > 0 then
    begin
      ShowMessage('Bank number may only contain numbers.');
      ledCard.Clear;
      ledCard.SetFocus;
    end
  else if Length(ledCard.Text) > 16 then
    begin
      ShowMessage('Bank number may not exceed 16 characters.');
      ledCard.Clear;
      ledCard.SetFocus;
    end
  else
    Exit;

  dmTest.runSQL('UPDATE Customer SET CBankAccountNum = ' + QuotedStr(ledBank.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledCardExit(Sender: TObject);
var
  I, iCount: Integer;
  sText: String;
begin
  iCount := 0;
  sText := LowerCase(ledCard.Text);

  if sText = '' then
    begin
      ShowMessage('Please enter a card number.');
      ledCard.Clear;
      ledCard.SetFocus;
      Exit;
    end;

  for I := 1 to Length(sText) do
      begin
        if sText[I] IN ['a'..'z'] then
          Inc(iCount);
      end;

  if iCount > 0 then
    begin
      ShowMessage('Card number may only contain numbers.');
      ledCard.Clear;
      ledCard.SetFocus;
    end
  else if Length(ledCard.Text) > 16 then
    begin
      ShowMessage('Card number may not exceed 16 characters.');
      ledCard.Clear;
      ledCard.SetFocus;
    end
  else
    Exit;

  dmTest.runSQL('UPDATE Customer SET CCardNum = ' + QuotedStr(ledCard.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledCityExit(Sender: TObject);
begin
  if Length(ledCity.Text) > 30 then
    begin
      ShowMessage('City name is too long.');
      ledCity.Clear;
      ledCity.SetFocus;
      Exit;
    end;

  dmTest.runSQL('UPDATE Customer SET CCity = ' + QuotedStr(ledCity.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledPostExit(Sender: TObject);
begin
  if Length(ledPost.Text) > 8 then
    begin
      ShowMessage('Post code is too long.');
      ledPost.Clear;
      ledPost.SetFocus;
      Exit;
    end;

  dmTest.runSQL('UPDATE Customer SET CPost = ' + QuotedStr(ledPost.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledEmailExit(Sender: TObject);
var
  bFlag1, bFlag2: Boolean;
  I, iPos : Integer;

begin
  bFlag1 := False;
  bFlag2 := False;
  iPos := -1;

  if Length(ledEmail.Text) > 100 then
    begin
      ShowMessage('Email is too long. May not exceed more than 100 characters.');
      ledEmail.Clear;
      ledEmail.SetFocus;
    end;

  for I := 1 to Length(ledEmail.Text) do
    begin
      if ledEmail.Text[I] = '@' then
        begin
          bFlag1 := True;
          iPos := I;
        end;
      if (ledEmail.Text[I] = '.') AND (I > iPos) then
        bFlag2 := True;
    end;  //FOR

  if NOT (bFlag1 OR bFlag2) then
    begin
      ShowMessage('Invalid email entered.');
      ledEmail.Clear;
      ledEmail.SetFocus;
      Exit;
    end;

  dmtest.runSQL('UPDATE Customer SET CEmail = ' + QuotedStr(ledEmail.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));

end;

procedure TfrmCustomer.ledPhoneExit(Sender: TObject);
begin
  if ledPhone.Text = '' then
  begin
    ShowMessage('Please enter a value.');
    Exit;
  end;

  dmtest.runSQL('UPDATE Customer SET CPhoneNum = ' + QuotedStr(ledPhone.Text) + ' WHERE CID = ' + QuotedStr(frmLogin.sUser));
end;

procedure TfrmCustomer.ledPwConfExit(Sender: TObject);
begin
if ledPWConf.Text <> sPassCheck then
    begin
      ShowMessage('Passwords do not match.');
      ledPWConf.Clear;
      ledPWConf.SetFocus;
      Exit;
    end;


end;

procedure TfrmCustomer.ledPwExit(Sender: TObject);
var
  I, iAlphaCount, iNumCount, iSpecCount: Integer;
  sText: String;
begin
  iAlphaCount := 0;
  iNumCount := 0;
  iSpecCount := 0;
  sText := ledPW.Text;

  for I := 1 to Length(sText) do
    begin
      if sText[I] IN ['A'..'Z'] then
        Inc(iAlphaCount);
      if sText[I] IN ['!'..'&'] then
        Inc(iSpecCount);
      if sText[I] IN ['0'..'9'] then
        Inc(iNumCount);
    end;

  if NOT ((iAlphaCount >= 2) OR (iSpecCount >= 1) OR (iNumCount >= 2)) then
    begin
      ShowMessage('Invalid password entered.');
      ledPW.Clear;
      ledPW.SetFocus;
    end
  else
    begin
      ledPWConf.Visible := True;
      sPassCheck := sText;
    end;


end;

procedure TfrmCustomer.prepDB(sText: String);
begin
  if sText = '' then
    begin
      ShowMessage('Please enter a new value.');
      Exit;
    end;

  with dmTest do
  begin
    tblCustomers.Locate('CID', frmLogin.sUser, [loCaseInsensitive]);
    tblCustomers.Insert;
  end;
end;

procedure TfrmCustomer.refreshArrCus;
var
  I, iCount : Integer;
  objCustomer: TCustomer;
begin
  iCount := 0;
  iCusCount := 0;

  with dmTest do
    begin
      tblCustomers.First;
      while NOT tblCustomers.Eof do
        begin
          Inc(iCusCount);
          tblCustomers.Next;
        end;  //WHILE

    end;  //WITH

  SetLength(arrCustomer, 0);
  SetLength(arrCustomer, iCusCount);

  with dmTest do
    begin
      tblCustomers.First;

      while NOT tblCustomers.Eof do
        begin
          objCustomer := TCustomer.Create(tblCustomers['CID'], tblCustomers['CFirstName'],
          tblCustomers['CLastName'],tblCustomers['CPhoneNum'],tblCustomers['CEmail'],tblCustomers['CAddress'],
          tblCustomers['CCity'],tblCustomers['CPost'],tblCustomers['CCountry'],tblCustomers['CPayMethod'],
          tblCustomers['CCardNum'],tblCustomers['CBankAccountNum'],tblCustomers['CPassword']);

          arrCustomer[iCount] := objCustomer;  //arrCustomer populated

          Inc(iCount);
          tblCustomers.Next;
        end;  //WHILE

    end;  //WITH
end;

procedure TfrmCustomer.rgpPaymentClick(Sender: TObject);
begin
  case rgpPayment.ItemIndex of
    0: begin
      ledBank.Visible := True;
      ledCard.Visible := False;
    end;
    1: begin
      ledCard.Visible := True;
      ledBank.Visible := False;
    end;

  end;  //CASE

end;

end.
